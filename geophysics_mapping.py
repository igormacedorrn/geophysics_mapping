# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeophysicsMapping
                                 A QGIS plugin
 This plug-in automates the map making workflow
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Igor Macedo
        email                : imacedo@axiomex.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTextEdit
from qgis.gui import QgsFileWidget
from qgis.PyQt import uic
from qgis.core import (
    QgsProject,
    QgsPrintLayout,
    QgsReadWriteContext,
    QgsRasterLayer,
    QgsMultiBandColorRenderer,
    QgsRasterTransparency,
    QgsLayoutItemMap,
    QgsMapLayerType,
)
from qgis.PyQt.QtXml import QDomDocument

import os
import re


class GeophysicsMapping:
    """Main plugin class."""

    def __init__(self, iface):
        """Initialize plugin and locale."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", f"GeophysicsMapping_{locale}.qm"
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr("&Geophysics Mapping")
        self.first_start = None

    def tr(self, message):
        """Translate string."""
        return QCoreApplication.translate("GeophysicsMapping", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add action to toolbar and menu."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip:
            action.setStatusTip(status_tip)
        if whats_this:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Add plugin icon and menu entry."""
        icon_path = ":/plugins/geophysics_mapping/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Create Geophysics Maps from Template"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )
        self.first_start = True

    def unload(self):
        """Remove plugin UI elements."""
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Launch plugin dialog."""
        if self.first_start:
            self.first_start = False

            ui_path = os.path.join(self.plugin_dir, "geophysics_mapping_dialog_base.ui")
            self.dlg = uic.loadUi(ui_path)

            try:
                template_widget = self.dlg.findChild(
                    QgsFileWidget, "TemplatemQgsFileWidget"
                )
                if template_widget:
                    template_widget.setDialogTitle("Select Geophysics Template")
                    template_widget.setFilter("QGIS Layout Template (*.qpt)")
                    default_template = os.path.join(
                        self.plugin_dir, "Geophysics_SurveyMaps.qpt"
                    )
                    template_widget.setFilePath(default_template)
            except Exception as e:
                print(f"Error configuring TemplatemQgsFileWidget: {e}")

            try:
                geotiff_widget = self.dlg.findChild(
                    QgsFileWidget, "GeotiffQgsFileWidget"
                )
                if geotiff_widget:
                    geotiff_widget.setDialogTitle("Select GeoTIFF Raster File")
                    geotiff_widget.setFilter("GeoTIFF (*.tif *.tiff)")
                    default_geotiff = os.path.join(
                        self.plugin_dir, "default_geotiff.tif"
                    )
                    geotiff_widget.setFilePath(default_geotiff)
            except Exception as e:
                print(f"Error configuring GeotiffQgsFileWidget: {e}")

            try:
                legend_widget = self.dlg.findChild(QgsFileWidget, "LegendQgsFileWidget")
                if legend_widget:
                    legend_widget.setDialogTitle("Select Legend Image or File")
                    legend_widget.setFilter(
                        "Image Files (*.png *.jpg *.jpeg *.svg);;PDF Files (*.pdf)"
                    )
                    default_legend = os.path.join(self.plugin_dir, "default_legend.png")
                    legend_widget.setFilePath(default_legend)
            except Exception as e:
                print(f"Error configuring LegendQgsFileWidget: {e}")

            try:
                self.dlg.CreatePushButton.clicked.connect(
                    self.create_layout_from_template
                )
            except Exception as e:
                print(f"Error connecting CreatePushButton: {e}")

        self.dlg.show()

    def get_or_load_raster_layer(self, raster_path):
        """Return existing raster layer if already loaded, or load it."""
        for layer in QgsProject.instance().mapLayers().values():
            if (
                layer.type() == QgsMapLayerType.RasterLayer
                and layer.source() == raster_path
            ):
                print("Raster already loaded â€” reusing existing layer.")
                return layer

        raster_layer = QgsRasterLayer(raster_path, os.path.basename(raster_path))
        if raster_layer.isValid():
            QgsProject.instance().addMapLayer(raster_layer)
            print("Raster loaded into project.")
            return raster_layer
        else:
            print("Failed to load raster layer.")
            return None

    def apply_white_transparency(self, raster_layer):
        """Apply transparency to white pixels."""
        renderer = QgsMultiBandColorRenderer(raster_layer.dataProvider(), 1, 2, 3)
        transparency = QgsRasterTransparency()
        white_pixel = QgsRasterTransparency.TransparentSingleValuePixel()
        white_pixel.red = 255
        white_pixel.green = 255
        white_pixel.blue = 255
        white_pixel.percentTransparent = 100.0
        transparency.addTransparentSingleValuePixel(white_pixel)
        renderer.setRasterTransparency(transparency)
        raster_layer.setRenderer(renderer)

    def create_layout_from_template(self):
        """Create a new layout from the selected .qpt template and open it."""
        try:
            template_path = self.dlg.TemplatemQgsFileWidget.filePath()
            raster_path = self.dlg.GeotiffQgsFileWidget.filePath()

            if not os.path.exists(template_path):
                raise FileNotFoundError("Template file not found.")

            layout_name = "Geophysics_Map"
            try:
                name_widget = self.dlg.findChild(QTextEdit, "MapLayoutTextEdit")
                if name_widget:
                    user_text = name_widget.toPlainText().strip()
                    user_text = re.sub(r'[\\/:*?"<>|]', "", user_text)
                    if user_text:
                        layout_name = user_text
            except Exception as e:
                print(f"Error accessing MapLayoutTextEdit: {e}")

            with open(template_path, "r", encoding="utf-8") as file:
                template_content = file.read()
            doc = QDomDocument()
            doc.setContent(template_content)

            project = QgsProject.instance()
            layout_manager = project.layoutManager()

            existing_layout = layout_manager.layoutByName(layout_name)
            if existing_layout:
                layout_manager.removeLayout(existing_layout)

            layout = QgsPrintLayout(project)
            layout.initializeDefaults()

            context = QgsReadWriteContext()
            if not layout.loadFromTemplate(doc, context):
                raise RuntimeError("Failed to load layout from template.")

            layout.setName(layout_name)
            layout_manager.addLayout(layout)

            raster_layer = None
            if os.path.exists(raster_path):
                raster_layer = self.get_or_load_raster_layer(raster_path)
                if raster_layer:
                    self.apply_white_transparency(raster_layer)

                    map_item = layout.itemById("SatMap")
                    if isinstance(map_item, QgsLayoutItemMap):
                        map_item.setLayers([raster_layer])
                        map_item.setExtent(self.iface.mapCanvas().extent())
                        map_item.refresh()
                        print("Raster linked and extent set to canvas.")
                    else:
                        print("Layout item 'SatMap' not found or not a map.")
                else:
                    print("Raster layer invalid.")
            else:
                print("Raster file not found.")

            self.iface.openLayoutDesigner(layout)
            print(f"Layout '{layout_name}' created and opened successfully.")
        except Exception as e:
            print(f"Error creating layout: {e}")
