# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeophysicsMapping
                                 A QGIS plugin
 This plug-in automates the map making workflow
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Igor Macedo
        email                : imacedo@axiomex.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsFileWidget
from qgis.PyQt import uic
from qgis.core import (
    QgsProject,
    QgsRasterLayer,
    QgsMapLayerType,
)

from .layout_editor import LayoutEditor

import os
import re


class GeophysicsMapping:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.layout_editor = LayoutEditor()
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", f"GeophysicsMapping_{locale}.qm"
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr("&Geophysics Mapping")
        self.first_start = None
        self.current_layout = None  # will store the most recent layout

    def tr(self, message):
        return QCoreApplication.translate("GeophysicsMapping", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip:
            action.setStatusTip(status_tip)
        if whats_this:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        icon_path = r"/plugins/geophysics_mapping/icon_64.png"
        self.add_action(
            icon_path,
            text=self.tr("Geophysics Mapping"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )
        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.first_start = False
            ui_path = os.path.join(self.plugin_dir, "geophysics_mapping_dialog_base.ui")
            self.dlg = uic.loadUi(ui_path)

            self.dlg.TemplatemQgsFileWidget.setDialogTitle("Select Geophysics Template")
            self.dlg.TemplatemQgsFileWidget.setFilter("QGIS Layout Template (*.qpt)")

            default_template = os.path.join(
                self.plugin_dir, "templates", "Geophysics_SurveyMaps.qpt"
            )
            self.dlg.TemplatemQgsFileWidget.setFilePath(default_template)

            self.dlg.GeotiffQgsFileWidget.setDialogTitle("Select GeoTIFF Raster File")
            self.dlg.GeotiffQgsFileWidget.setFilter("GeoTIFF (*.tif *.tiff)")
            default_geotiff = os.path.join(self.plugin_dir, "default_geotiff.tif")
            self.dlg.GeotiffQgsFileWidget.setFilePath(default_geotiff)

            self.dlg.LegendQgsFileWidget.setDialogTitle("Select Legend Image or File")
            self.dlg.LegendQgsFileWidget.setFilter(
                "Image Files (*.png *.jpg *.jpeg *.svg);;PDF Files (*.pdf)"
            )
            default_legend = os.path.join(self.plugin_dir, "default_legend.png")
            self.dlg.LegendQgsFileWidget.setFilePath(default_legend)

            self.dlg.CreatePushButton.clicked.connect(self.create_layout_from_template)

        self.dlg.show()

    def get_or_load_raster_layer(self, raster_path):
        for layer in QgsProject.instance().mapLayers().values():
            if (
                layer.type() == QgsMapLayerType.RasterLayer
                and layer.source() == raster_path
            ):
                return layer

        raster_layer = QgsRasterLayer(raster_path, os.path.basename(raster_path))
        if raster_layer.isValid():
            QgsProject.instance().addMapLayer(raster_layer)
            return raster_layer
        else:
            return None

    def create_layout_from_template(self):
        try:
            template_path = self.dlg.TemplatemQgsFileWidget.filePath()
            raster_path = self.dlg.GeotiffQgsFileWidget.filePath()
            user_text = self.dlg.MapLayoutTextEdit.toPlainText().strip()
            layout_name = "Geophysics_Map"
            if user_text:
                layout_name = re.sub(r'[\\/:*?"<>|]', "", user_text)

            # Create or duplicate layout
            if self.current_layout is None:
                # First layout - create from template
                layout = self.layout_editor.create_layout(template_path, layout_name)
            else:
                # Subsequent layouts - duplicate the last one created
                layout = self.layout_editor.duplicate_layout(
                    self.current_layout, layout_name
                )

            if not layout:
                return

            # Process raster and update layout
            if os.path.exists(raster_path):
                raster_layer = self.get_or_load_raster_layer(raster_path)
                if raster_layer:
                    self.layout_editor.update_map_item(layout, raster_layer)

                    # Get map information and update layout items
                    title_text, map_desc, units_text, legend_file = (
                        self.layout_editor.get_map_info(raster_path)
                    )

                    self.layout_editor.update_text_item(layout, "Title", title_text)
                    self.layout_editor.update_text_item(
                        layout, "Client-Location", self.layout_editor.client_location
                    )
                    self.layout_editor.update_text_item(
                        layout, "Map Description", map_desc
                    )
                    self.layout_editor.update_text_item(
                        layout, "Legend Unit", units_text
                    )

                    # Handle legend file
                    legend_path = None
                    if legend_file:
                        raster_dir = os.path.dirname(raster_path)
                        legends_folder = os.path.join(raster_dir, "LEGENDS")
                        candidate_path = os.path.join(legends_folder, legend_file)
                        if os.path.exists(candidate_path):
                            legend_path = candidate_path

                    # Fallback to manually selected legend path
                    if not legend_path or not os.path.exists(legend_path):
                        legend_path = self.dlg.LegendQgsFileWidget.filePath()

                    if os.path.exists(legend_path):
                        self.layout_editor.update_picture_item(
                            layout, "Legend (Oasis)", legend_path
                        )

            # Store this layout as the most recent one
            self.current_layout = layout

            self.iface.openLayoutDesigner(layout)
            print(f"Layout '{layout_name}' created and opened successfully.")

        except Exception as e:
            import traceback

            print("Error creating layout:", e)
            print(traceback.format_exc())
