# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeophysicsMapping
                                 A QGIS plugin
 This plug-in automates the map making workflow
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Igor Macedo
        email                : imacedo@axiomex.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTextEdit
from qgis.gui import QgsFileWidget
from qgis.PyQt import uic
from qgis.core import (
    QgsProject,
    QgsPrintLayout,
    QgsReadWriteContext,
    QgsRasterLayer,
    QgsLayoutItemMap,
    QgsLayoutItemPicture,
    QgsMapLayerType,
)
from qgis.PyQt.QtXml import QDomDocument

import os
import re


class GeophysicsMapping:
    """Main plugin class."""

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", f"GeophysicsMapping_{locale}.qm"
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr("&Geophysics Mapping")
        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate("GeophysicsMapping", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip:
            action.setStatusTip(status_tip)
        if whats_this:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        icon_path = ":/plugins/geophysics_mapping/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Create Geophysics Maps from Template"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )
        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.first_start = False
            ui_path = os.path.join(self.plugin_dir, "geophysics_mapping_dialog_base.ui")
            self.dlg = uic.loadUi(ui_path)

            try:
                self.dlg.TemplatemQgsFileWidget.setDialogTitle(
                    "Select Geophysics Template"
                )
                self.dlg.TemplatemQgsFileWidget.setFilter(
                    "QGIS Layout Template (*.qpt)"
                )
                default_template = os.path.join(
                    self.plugin_dir, "Geophysics_SurveyMaps.qpt"
                )
                self.dlg.TemplatemQgsFileWidget.setFilePath(default_template)
            except Exception as e:
                print(f"Error configuring TemplatemQgsFileWidget: {e}")

            try:
                self.dlg.GeotiffQgsFileWidget.setDialogTitle(
                    "Select GeoTIFF Raster File"
                )
                self.dlg.GeotiffQgsFileWidget.setFilter("GeoTIFF (*.tif *.tiff)")
                default_geotiff = os.path.join(self.plugin_dir, "default_geotiff.tif")
                self.dlg.GeotiffQgsFileWidget.setFilePath(default_geotiff)
            except Exception as e:
                print(f"Error configuring GeotiffQgsFileWidget: {e}")

            try:
                self.dlg.LegendQgsFileWidget.setDialogTitle(
                    "Select Legend Image or File"
                )
                self.dlg.LegendQgsFileWidget.setFilter(
                    "Image Files (*.png *.jpg *.jpeg *.svg);;PDF Files (*.pdf)"
                )
                default_legend = os.path.join(self.plugin_dir, "default_legend.png")
                self.dlg.LegendQgsFileWidget.setFilePath(default_legend)
            except Exception as e:
                print(f"Error configuring LegendQgsFileWidget: {e}")

            try:
                self.dlg.CreatePushButton.clicked.connect(
                    self.create_layout_from_template
                )
                print("CreatePushButton connected.")
            except Exception as e:
                print(f"Error connecting CreatePushButton: {e}")

        self.dlg.show()

    def get_or_load_raster_layer(self, raster_path):
        for layer in QgsProject.instance().mapLayers().values():
            if (
                layer.type() == QgsMapLayerType.RasterLayer
                and layer.source() == raster_path
            ):
                print("Raster already loaded — reusing existing layer.")
                return layer

        raster_layer = QgsRasterLayer(raster_path, os.path.basename(raster_path))
        if raster_layer.isValid():
            QgsProject.instance().addMapLayer(raster_layer)
            print("Raster loaded into project.")
            return raster_layer
        else:
            print("Failed to load raster layer.")
            return None

    def create_layout_from_template(self):
        try:
            print("CreatePushButton clicked — starting layout creation.")
            template_path = self.dlg.TemplatemQgsFileWidget.filePath()
            raster_path = self.dlg.GeotiffQgsFileWidget.filePath()
            legend_path = self.dlg.LegendQgsFileWidget.filePath()

            if not os.path.exists(template_path):
                raise FileNotFoundError("Template file not found.")

            layout_name = "Geophysics_Map"
            try:
                user_text = self.dlg.MapLayoutTextEdit.toPlainText().strip()
                user_text = re.sub(r'[\\/:*?"<>|]', "", user_text)
                if user_text:
                    layout_name = user_text
            except Exception as e:
                print(f"Error accessing MapLayoutTextEdit: {e}")

            with open(template_path, "r", encoding="utf-8") as file:
                template_content = file.read()
            doc = QDomDocument()
            doc.setContent(template_content)

            project = QgsProject.instance()
            layout_manager = project.layoutManager()

            existing_layout = layout_manager.layoutByName(layout_name)
            if existing_layout:
                layout_manager.removeLayout(existing_layout)

            layout = QgsPrintLayout(project)
            layout.initializeDefaults()

            context = QgsReadWriteContext()
            if not layout.loadFromTemplate(doc, context):
                raise RuntimeError("Failed to load layout from template.")

            layout.setName(layout_name)
            layout_manager.addLayout(layout)

            # Link raster to map item and zoom to raster extent
            if os.path.exists(raster_path):
                raster_layer = self.get_or_load_raster_layer(raster_path)
                if raster_layer:
                    map_item = layout.itemById("SatMap")
                    if isinstance(map_item, QgsLayoutItemMap):
                        map_item.setLayers([raster_layer])
                        raster_extent = raster_layer.extent()
                        if not raster_extent.isEmpty():
                            map_item.zoomToExtent(raster_extent)
                            map_item.refresh()
                            print("Map scale adjusted to fit raster extent.")
                        else:
                            print("Raster extent is empty — cannot zoom.")
                    else:
                        print("Layout item 'SatMap' not found or not a map.")
                else:
                    print("Raster layer invalid.")
            else:
                print("Raster file not found.")

            # Insert legend image
            if os.path.exists(legend_path):
                legend_item = layout.itemById("Legend (Oasis)")
                if isinstance(legend_item, QgsLayoutItemPicture):
                    legend_item.setPicturePath(legend_path)
                    legend_item.refresh()
                    print("Legend image inserted into layout.")
                else:
                    print(
                        "Layout item 'Legend (Oasis)' not found or not a picture item."
                    )
            else:
                print("Legend image file not found.")

            print("Opening layout designer...")
            self.iface.openLayoutDesigner(layout)
            print(f"Layout '{layout_name}' created and opened successfully.")
        except Exception as e:
            print(f"Error creating layout: {e}")
