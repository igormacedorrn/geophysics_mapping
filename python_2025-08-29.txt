from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsFileWidget
from qgis.PyQt import uic
from qgis.core import (
    QgsProject,
    QgsPrintLayout,
    QgsReadWriteContext,
    QgsRasterLayer,
    QgsLayoutItemMap,
    QgsLayoutItemPicture,
    QgsLayoutItemLabel,
    QgsMapLayerType,
)
from qgis.PyQt.QtXml import QDomDocument

import os
import re


class GeophysicsMapping:
    DESCRIPTION_LOOKUP = {
        "Total Field Magnetics": (
            "Total Magnetic Intensity",
            "Total Magnetic Intensity (nT)",
        ),
        "Total Field Magnetics RTP": (
            "TMI Reduced to Pole",
            "Total Magnetic Intensity Reduced to Pole (nT)",
        ),
        "Total Field Magnetics RTP 1VD": (
            "First Vertical Derivative",
            "First Vertical Derivative : TMI Reduced to Pole (nT/m)",
        ),
        "Total Field Magnetics RTP THDR": (
            "Total Horizontal Gradient",
            "Total Horizontal Gradient : TMI Reduced to Pole (nT/m)",
        ),
        "Total Field Magnetics RTP TDR": (
            "Tilt Derivative",
            "Tilt Derivative : TMI Reduced to Pole (rad)",
        ),
        "Total Field Magnetics RTP RMI": (
            "Residual Magnetic Intensity",
            "IGRF corrected TMI (nT)",
        ),
        "Total Field Magnetics RTP Residual 1500 m": (
            "Residual Filtered - 1500 m",
            "Residual Filtered : TMI Reduced to Pole (nT)",
        ),
        "Total Field Magnetics RTP Regional 1500 m": (
            "Regional Filtered - 1500 m",
            "Regional Filtered : TMI Reduced to Pole (nT)",
        ),
        "Total Field Magnetics RTP AS": (
            "Analytical Signal",
            "Analytical Signal (nT/m)",
        ),
        "dBdt Z ch10": (
            "dB/dt z component 0.014 ms after turnoff",
            "dB/dt z component : channel 10 (pV/(Am^4))",
        ),
        "dBdt Z ch15": (
            "dB/dt z component 0.045 ms after turnoff",
            "dB/dt z component : channel 15 (pV/(Am^4))",
        ),
        "dBdt Z ch20": (
            "dB/dt z component 0.12 ms after turnoff",
            "dB/dt z component : channel 20 (pV/(Am^4))",
        ),
        "dBdt Z ch25": (
            "dB/dt z component 0.26 ms after turnoff",
            "dB/dt z component : channel 25 (pV/(Am^4))",
        ),
        "dBdt Z ch30": (
            "dB/dt z component 0.56 ms after turnoff",
            "dB/dt z component : channel 30 (pV/(Am^4))",
        ),
        "dBdt Z ch35": (
            "dB/dt z component 1.16 ms after turnoff",
            "dB/dt z component : channel 35 (pV/(Am^4))",
        ),
        "dBdt Z ch40": (
            "dB/dt z component 2.36 ms after turnoff",
            "dB/dt z component : channel 40 (pV/(Am^4))",
        ),
        "dBdt Z ch45": (
            "dB/dt z component 4.74 ms after turnoff",
            "dB/dt z component : channel 45 (pV/(Am^4))",
        ),
        "Digital Terrain Model": ("Digital Terrain Model", "Digital Terrain Model (m)"),
        "Conductivity Depth Slice 25m": (
            "Conductivity Depth Slice - 25m",
            "Conductivity (S/m)",
        ),
        "Susceptibility Depth Slice 25m": (
            "Susceptibility Depth Slice - 25m",
            "Relative Susceptibility (SI)",
        ),
    }

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", f"GeophysicsMapping_{locale}.qm"
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr("&Geophysics Mapping")
        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate("GeophysicsMapping", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip:
            action.setStatusTip(status_tip)
        if whats_this:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        icon_path = r"/plugins/geophysics_mapping/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Geophysics Mapping"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )
        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.first_start = False
            ui_path = os.path.join(self.plugin_dir, "geophysics_mapping_dialog_base.ui")
            self.dlg = uic.loadUi(ui_path)

            self.dlg.TemplatemQgsFileWidget.setDialogTitle("Select Geophysics Template")
            self.dlg.TemplatemQgsFileWidget.setFilter("QGIS Layout Template (*.qpt)")
            default_template = os.path.join(
                self.plugin_dir, "Geophysics_SurveyMaps.qpt"
            )
            self.dlg.TemplatemQgsFileWidget.setFilePath(default_template)

            self.dlg.GeotiffQgsFileWidget.setDialogTitle("Select GeoTIFF Raster File")
            self.dlg.GeotiffQgsFileWidget.setFilter("GeoTIFF (*.tif *.tiff)")
            default_geotiff = os.path.join(self.plugin_dir, "default_geotiff.tif")
            self.dlg.GeotiffQgsFileWidget.setFilePath(default_geotiff)

            self.dlg.LegendQgsFileWidget.setDialogTitle("Select Legend Image or File")
            self.dlg.LegendQgsFileWidget.setFilter(
                "Image Files (*.png *.jpg *.jpeg *.svg);;PDF Files (*.pdf)"
            )
            default_legend = os.path.join(self.plugin_dir, "default_legend.png")
            self.dlg.LegendQgsFileWidget.setFilePath(default_legend)

            self.dlg.CreatePushButton.clicked.connect(self.create_layout_from_template)

        self.dlg.show()

    def get_or_load_raster_layer(self, raster_path):
        for layer in QgsProject.instance().mapLayers().values():
            if (
                layer.type() == QgsMapLayerType.RasterLayer
                and layer.source() == raster_path
            ):
                return layer

        raster_layer = QgsRasterLayer(raster_path, os.path.basename(raster_path))
        if raster_layer.isValid():
            QgsProject.instance().addMapLayer(raster_layer)
            return raster_layer
        else:
            return None

    def create_layout_from_template(self):
        try:
            template_path = self.dlg.TemplatemQgsFileWidget.filePath()
            raster_path = self.dlg.GeotiffQgsFileWidget.filePath()
            legend_path = self.dlg.LegendQgsFileWidget.filePath()

            if not os.path.exists(template_path):
                raise FileNotFoundError("Template file not found.")

            layout_name = "Geophysics_Map"
            user_text = self.dlg.MapLayoutTextEdit.toPlainText().strip()
            user_text = re.sub(r'[\\/:*?"<>|]', "", user_text)
            if user_text:
                layout_name = user_text

            with open(template_path, "r", encoding="utf-8") as file:
                template_content = file.read()
            doc = QDomDocument()
            doc.setContent(template_content)

            project = QgsProject.instance()
            layout_manager = project.layoutManager()

            existing_layout = layout_manager.layoutByName(layout_name)
            if existing_layout:
                layout_manager.removeLayout(existing_layout)

            layout = QgsPrintLayout(project)
            layout.initializeDefaults()
            context = QgsReadWriteContext()
            if not layout.loadFromTemplate(doc, context):
                raise RuntimeError("Failed to load layout from template.")

            layout.setName(layout_name)
            layout_manager.addLayout(layout)

            if os.path.exists(raster_path):
                raster_layer = self.get_or_load_raster_layer(raster_path)
                if raster_layer:
                    map_item = layout.itemById("SatMap")
                    if isinstance(map_item, QgsLayoutItemMap):
                        map_item.setLayers([raster_layer])
                        raster_extent = raster_layer.extent()
                        if not raster_extent.isEmpty():
                            map_item.zoomToExtent(raster_extent)
                            original_scale = map_item.scale()
                            rounded_scale = round(original_scale, -3)
                            map_item.setScale(rounded_scale)
                            map_item.refresh()
                            print(
                                f"Map scale rounded from {original_scale} to {rounded_scale}"
                            )
                        else:
                            print("Raster extent is empty â€” cannot zoom.")
                    else:
                        print("Layout item 'SatMap' not found or not a map.")

                    # Extract title and description from filename
                    basename = os.path.basename(raster_path)
                    filename = os.path.splitext(basename)[0]
                    filename_parts = filename.split()
                    if len(filename_parts) > 1:
                        filename = " ".join(filename_parts[1:])  # Remove first word

                    title_text = ""
                    description_text = ""

                    for prefix in self.DESCRIPTION_PREFIXES:
                        if prefix in filename:
                            split_index = filename.find(prefix)
                            title_text = filename[:split_index].strip()
                            description_text = filename[split_index:].strip()
                            break

                    title_item = layout.itemById("Title")
                    if title_item:
                        title_item.setText(title_text)
                        print(f"Title set to: {title_text}")

                    desc_item = layout.itemById("Map Description")
                    if desc_item:
                        desc_item.setText(description_text)
                        print(f"Map Description set to: {description_text}")
                else:
                    print("Raster layer invalid.")
            else:
                print("Raster file not found.")

            if os.path.exists(legend_path):
                legend_item = layout.itemById("Legend (Oasis)")
                if isinstance(legend_item, QgsLayoutItemPicture):
                    legend_item.setPicturePath(legend_path)
                    legend_item.refresh()
                    print("Legend image inserted into layout.")
                else:
                    print(
                        "Layout item 'Legend (Oasis)' not found or not a picture item."
                    )
            else:
                print("Legend image file not found.")

            self.iface.openLayoutDesigner(layout)
            print(f"Layout '{layout_name}' created and opened successfully.")
        except Exception as e:
            print(f"Error creating layout: {e}")