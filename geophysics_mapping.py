# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeophysicsMapping
                                 A QGIS plugin
 This plug-in automates the map making workflow
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Igor Macedo
        email                : imacedo@axiomex.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsFileWidget
from qgis.PyQt import uic
from qgis.core import (
    QgsProject,
    QgsPrintLayout,
    QgsReadWriteContext,
    QgsRasterLayer,
    QgsLayoutItemMap,
    QgsLayoutItemPicture,
    QgsLayoutItemLabel,
    QgsMapLayerType,
)
from qgis.PyQt.QtXml import QDomDocument

import os
import re


class GeophysicsMapping:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", f"GeophysicsMapping_{locale}.qm"
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr("&Geophysics Mapping")
        self.first_start = None

        # -----------------------------
        # Internal DESCRIPTION_LOOKUP dictionary
        # Format: "FILENAME": ("Map Description", "Units", "Legend PNG")
        # -----------------------------
        self.DESCRIPTION_LOOKUP = {
            "TotalFieldMagnetics": (
                "Total Magnetic Intensity",
                "Total Magnetic Intensity (nT)",
                "Total Field Magnetics.png",
            ),
            "TotalFieldMagneticsRTP": (
                "TMI Reduced to Pole",
                "Total Magnetic Intensity Reduced to Pole (nT)",
                "Total Field Magnetics RTP.png",
            ),
            "TotalFieldMagneticsRTPVD1": (
                "First Vertical Derivative",
                "First Vertical Derivative: TMI Reduced to Pole (nT/m)",
                "Total Field Magnetics RTP VD1.png",
            ),
            "TotalFieldMagneticsRTPTHDR": (
                "Total Horizontal Gradient",
                "Total Horizontal Gradient: TMI Reduced to Pole (nT/m)",
                "Total Field Magnetics RTP THDR.png",
            ),
            "TotalFieldMagneticsRTPTDR": (
                "Tilt Derivative",
                "Tilt Derivative: TMI Reduced to Pole (rad)",
                "Total Field Magnetics RTP TDR.png",
            ),
            "TotalFieldMagneticsRTPRMI": (
                "Residual Magnetic Intensity",
                "IGRF corrected TMI (nT)",
                "Total Field Magnetics RTP RMI.png",
            ),
            "TotalFieldMagneticsRTPResidual1500m": (
                "Residual Filtered - 1500 m",
                "Residual Filtered: TMI Reduced to Pole (nT)",
                "Total Field Magnetics RTP Residual 1500 m.png",
            ),
            "TotalFieldMagneticsRTPRegional1500m": (
                "Regional Filtered - 1500 m",
                "Regional Filtered: TMI Reduced to Pole (nT)",
                "Total Field Magnetics RTP Regional 1500 m.png",
            ),
            "TotalFieldMagneticsRTPAS": (
                "Analytical Signal",
                "Analytical Signal (nT/m)",
                "Total Field Magnetics RTP AS.png",
            ),
            "dBdtZch10": (
                "dB/dt z component 0.014 ms after turnoff",
                "dB/dt z component: channel 10 (pV/(Am^4))",
                "dBdt Z ch10.png",
            ),
            "dBdtZch15": (
                "dB/dt z component 0.045 ms after turnoff",
                "dB/dt z component: channel 15 (pV/(Am^4))",
                "dBdt Z ch15.png",
            ),
            "dBdtZch20": (
                "dB/dt z component 0.12 ms after turnoff",
                "dB/dt z component: channel 20 (pV/(Am^4))",
                "dBdt Z ch20.png",
            ),
            "dBdtZch25": (
                "dB/dt z component 0.26 ms after turnoff",
                "dB/dt z component: channel 25 (pV/(Am^4))",
                "dBdt Z ch25.png",
            ),
            "dBdtZch30": (
                "dB/dt z component 0.56 ms after turnoff",
                "dB/dt z component: channel 30 (pV/(Am^4))",
                "dBdt Z ch30.png",
            ),
            "dBdtZch35": (
                "dB/dt z component 1.16 ms after turnoff",
                "dB/dt z component: channel 35 (pV/(Am^4))",
                "dBdt Z ch35.png",
            ),
            "dBdtZch40": (
                "dB/dt z component 2.36 ms after turnoff",
                "dB/dt z component: channel 40 (pV/(Am^4))",
                "dBdt Z ch40.png",
            ),
            "dBdtZch45": (
                "dB/dt z component 4.74 ms after turnoff",
                "dB/dt z component: channel 45 (pV/(Am^4))",
                "dBdt Z ch45.png",
            ),
            "DigitalTerrainModel": (
                "Digital Terrain Model",
                "Digital Terrain Model (m)",
                "Digital Terrain Model.png",
            ),
            "ConductivityDepthSlice25m": (
                "Conductivity Depth Slice - 25m",
                "Conductivity (S/m)",
                "Conductivity 25m.png",
            ),
            "SusceptibilityDepthSlice25m": (
                "Susceptibility Depth Slice - 25m",
                "Relative Susceptibility (SI)",
                "Susceptibility 25m.png",
            ),
            "AltitudeSensor": (
                "Altitude Sensor",
                "Altitude Sensor (m)",
                "Altitude Sensor.png",
            ),
        }

    def tr(self, message):
        return QCoreApplication.translate("GeophysicsMapping", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip:
            action.setStatusTip(status_tip)
        if whats_this:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        icon_path = r"/plugins/geophysics_mapping/icon_64.png"
        self.add_action(
            icon_path,
            text=self.tr("Geophysics Mapping"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )
        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(self.menu, action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.first_start = False
            ui_path = os.path.join(self.plugin_dir, "geophysics_mapping_dialog_base.ui")
            self.dlg = uic.loadUi(ui_path)

            self.dlg.TemplatemQgsFileWidget.setDialogTitle("Select Geophysics Template")
            self.dlg.TemplatemQgsFileWidget.setFilter("QGIS Layout Template (*.qpt)")
            default_template = os.path.join(
                self.plugin_dir, "Geophysics_SurveyMaps.qpt"
            )
            self.dlg.TemplatemQgsFileWidget.setFilePath(default_template)

            self.dlg.GeotiffQgsFileWidget.setDialogTitle("Select GeoTIFF Raster File")
            self.dlg.GeotiffQgsFileWidget.setFilter("GeoTIFF (*.tif *.tiff)")
            default_geotiff = os.path.join(self.plugin_dir, "default_geotiff.tif")
            self.dlg.GeotiffQgsFileWidget.setFilePath(default_geotiff)

            self.dlg.LegendQgsFileWidget.setDialogTitle("Select Legend Image or File")
            self.dlg.LegendQgsFileWidget.setFilter(
                "Image Files (*.png *.jpg *.jpeg *.svg);;PDF Files (*.pdf)"
            )
            default_legend = os.path.join(self.plugin_dir, "default_legend.png")
            self.dlg.LegendQgsFileWidget.setFilePath(default_legend)

            self.dlg.CreatePushButton.clicked.connect(self.create_layout_from_template)

        self.dlg.show()

    def get_or_load_raster_layer(self, raster_path):
        for layer in QgsProject.instance().mapLayers().values():
            if (
                layer.type() == QgsMapLayerType.RasterLayer
                and layer.source() == raster_path
            ):
                return layer

        raster_layer = QgsRasterLayer(raster_path, os.path.basename(raster_path))
        if raster_layer.isValid():
            QgsProject.instance().addMapLayer(raster_layer)
            return raster_layer
        else:
            return None

    def create_layout_from_template(self):
        try:
            template_path = self.dlg.TemplatemQgsFileWidget.filePath()
            raster_path = self.dlg.GeotiffQgsFileWidget.filePath()
            user_text = self.dlg.MapLayoutTextEdit.toPlainText().strip()
            layout_name = "Geophysics_Map"
            if user_text:
                layout_name = re.sub(r'[\\/:*?"<>|]', "", user_text)

            if not os.path.exists(template_path):
                raise FileNotFoundError("Template file not found.")

            with open(template_path, "r", encoding="utf-8") as file:
                template_content = file.read()
            doc = QDomDocument()
            doc.setContent(template_content)

            project = QgsProject.instance()
            layout_manager = project.layoutManager()

            existing_layout = layout_manager.layoutByName(layout_name)
            if existing_layout:
                layout_manager.removeLayout(existing_layout)

            layout = QgsPrintLayout(project)
            layout.initializeDefaults()
            context = QgsReadWriteContext()
            if not layout.loadFromTemplate(doc, context):
                raise RuntimeError("Failed to load layout from template.")

            layout.setName(layout_name)
            layout_manager.addLayout(layout)

            if os.path.exists(raster_path):
                raster_layer = self.get_or_load_raster_layer(raster_path)
                if raster_layer:
                    map_item = layout.itemById("SatMap")
                    if isinstance(map_item, QgsLayoutItemMap):
                        map_item.setLayers([raster_layer])
                        raster_extent = raster_layer.extent()
                        if not raster_extent.isEmpty():
                            map_item.zoomToExtent(raster_extent)
                            map_item.setScale(round(map_item.scale(), -3))
                            map_item.refresh()

                    # -----------------------------
                    # Extract Title and Lookup
                    # -----------------------------
                    basename_no_ext = os.path.splitext(os.path.basename(raster_path))[0]

                    # Remove WGS84 / NAD83 prefix
                    match_prefix = re.match(
                        r"^(WGS84|NAD83)\s+", basename_no_ext, re.IGNORECASE
                    )
                    start_idx = match_prefix.end() if match_prefix else 0
                    remaining_name = basename_no_ext[start_idx:].strip()

                    # Exact match in dictionary (longest key first)
                    matched_key = None
                    for key in sorted(
                        self.DESCRIPTION_LOOKUP.keys(), key=len, reverse=True
                    ):
                        if remaining_name.endswith(key):
                            matched_key = key
                            break

                    if matched_key:
                        title_text = remaining_name[: -len(matched_key)].strip()
                        map_desc, units_text, legend_file = self.DESCRIPTION_LOOKUP[
                            matched_key
                        ]
                    else:
                        title_text = remaining_name
                        map_desc = ""
                        units_text = ""
                        legend_file = ""

                    # -----------------------------
                    # Update layout items
                    # -----------------------------
                    title_item = layout.itemById("Title")
                    if title_item and isinstance(title_item, QgsLayoutItemLabel):
                        title_item.setText(title_text)

                    desc_item = layout.itemById("Map Description")
                    if desc_item and isinstance(desc_item, QgsLayoutItemLabel):
                        desc_item.setText(map_desc)

                    legend_unit_item = layout.itemById("Legend Unit")
                    if legend_unit_item and isinstance(
                        legend_unit_item, QgsLayoutItemLabel
                    ):
                        legend_unit_item.setText(units_text)

                    # -----------------------------
                    # Load legend image
                    # -----------------------------
                    legend_path = self.dlg.LegendQgsFileWidget.filePath()
                    if legend_file:
                        candidate_path = os.path.join(self.plugin_dir, legend_file)
                        if os.path.exists(candidate_path):
                            legend_path = candidate_path

                    if os.path.exists(legend_path):
                        legend_pic_item = layout.itemById("Legend (Oasis)")
                        if isinstance(legend_pic_item, QgsLayoutItemPicture):
                            legend_pic_item.setPicturePath(legend_path)
                            legend_pic_item.refresh()

            self.iface.openLayoutDesigner(layout)
            print(f"Layout '{layout_name}' created and opened successfully.")

        except Exception as e:
            import traceback

            print("Error creating layout:", e)
            print(traceback.format_exc())
